{
	"id": "GHSA-f3pg-qwvg-p99c",
	"advisories": [
		{
			"id": "GHSA-f3pg-qwvg-p99c",
			"title": "Lenient Parsing of Content-Length Header When Prefixed with Plus Sign",
			"description": "### Summary\n\nhyper's HTTP/1 server code had a flaw that incorrectly parses and accepts requests with a `Content-Length` header with a prefixed plus sign, when it should have been rejected as illegal. This combined with an upstream HTTP proxy that doesn't parse such `Content-Length` headers, but forwards them, can result in \"request smuggling\" or \"desync attacks\".\n\n### Vulnerability\n\nThe flaw exists in all prior versions of hyper, if built with [`rustc` v1.5.0 or newer](https://github.com/rust-lang/rust/pull/28826/commits/123a83326fb95366e94a3be1a74775df4db97739).\n\nExample:\n\n```\nGET / HTTP/1.1\nHost: example.com\nContent-Length: +3\n\nabc\n```\n\nThis request gets accepted and hyper reads the body as abc. The request _should_ be rejected, according to RFC 7230, since the ABNF for `Content-Length` only allows for `DIGIT`s. This is due to using the `FromStr` implementation for `u64` in the standard library. By differing from the spec, it is possible to send requests like these to endpoints that have different HTTP implementations, with different interpretations of the payload semantics, and cause \"desync attacks\".\n\nIn this particular case, an upstream proxy would need to error when parsing the `Content-Length`, but _not_ reject the request (swallowing its own error), and forwarding the request as-is with the `Content-Length` still included. _Then_ the upstream proxy and hyper would disagree on the length of the request body. The combination of these factors would be extremely rare.\n\nRead more about desync attacks: https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn\n\n### Impact\n\nTo determine if vulnerable, all these things must be true:\n\n- **Using hyper as an HTTP server**. While the lenient decoder also exists in the client, a vulnerability does not exist around _responses_.\n- **Using HTTP/1**. The HTTP/2 code uses a stricter parser.\n- **Using a vulnerable HTTP proxy upstream to hyper**. If an upstream proxy correctly rejects the illegal `Content-Length` header, *OR* can parse the length with the plus sign, the desync attack cannot succeed.\n\n### Patches\n\nWe have released the following patch versions:\n\n- v0.14.10 (to be released when this advisor is published)\n\n### Workarounds\n\nBesides upgrading hyper, you can take the following options:\n\n- Reject requests manually that contain a plus sign prefix in the `Content-Length` header.\n- Ensure any upstream proxy handles `Content-Length` headers with a plus sign prefix.\n\n### Credits\nThis issue was initially reported by [Mattias Grenfeldt](https://grenfeldt.dev/) and Asta Olofsson.",
			"severity": [
				{
					"type": "cvss_v31",
					"source": "github.com/advisories",
					"cvss_v31": {
						"vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N",
						"base_score": 3.1,
						"base_severity": "LOW",
						"temporal_score": 3.1,
						"temporal_severity": "LOW",
						"environmental_score": 3.1,
						"environmental_severity": "LOW"
					}
				},
				{
					"type": "vendor",
					"source": "github.com/advisories",
					"vendor": "LOW"
				}
			],
			"references": [
				{
					"source": "github.com/advisories",
					"url": "https://github.com/hyperium/hyper/security/advisories/GHSA-f3pg-qwvg-p99c"
				},
				{
					"source": "github.com/advisories",
					"url": "https://nvd.nist.gov/vuln/detail/CVE-2021-32715"
				},
				{
					"source": "github.com/advisories",
					"url": "https://github.com/rust-lang/rust/pull/28826/commits/123a83326fb95366e94a3be1a74775df4db97739"
				},
				{
					"source": "github.com/advisories",
					"url": "https://github.com/hyperium/hyper/commit/1fb719e0b61a4f3d911562a436a2ff05fd7cb759"
				},
				{
					"source": "github.com/advisories",
					"url": "https://github.com/hyperium/hyper"
				},
				{
					"source": "github.com/advisories",
					"url": "https://rustsec.org/advisories/RUSTSEC-2021-0078.html"
				}
			],
			"published": "2021-07-12T16:54:20Z",
			"modified": "2021-09-07T21:49:21Z",
			"optional": {
				"github_reviewed": true
			}
		}
	],
	"vulnerabilities": [
		{
			"id": "CVE-2021-32715"
		}
	],
	"detection": [
		{
			"ecosystem": "cargo",
			"vulnerable": true,
			"package": {
				"name": "hyper"
			},
			"affected": {
				"type": "semver",
				"range": [
					{
						"lt": "0.14.10"
					}
				],
				"fixed": [
					"0.14.10"
				]
			}
		}
	],
	"data_source": "cargo-ghsa"
}
