{
	"id": "GHSA-v8gq-5grq-9728",
	"advisories": [
		{
			"id": "GHSA-v8gq-5grq-9728",
			"title": "mozjpeg DecompressScanlines::read_scanlines is Unsound",
			"description": "This issue and vector is similar to [RUSTSEC-2020-0029] of `rgb` crate which `mozjpeg` depends on.\n\nAffected versions of `mozjpeg` crate allow creating instances of any type `T` from bytes,\nand do not correctly constrain `T` to the types for which it is safe to do so.\n\nExamples of safety violation possible for a type `T`:\n\n* `T` contains a reference type, and it constructs a pointer to an invalid, arbitrary memory address.\n* `T` requires a safety and/or validity invariant for its construction that may be violated.\n\nThe issue was fixed in 0.8.19 by using safer types and involving `rgb` dependency bump.\n\n[RUSTSEC-2020-0029]: https://rustsec.org/advisories/RUSTSEC-2020-0029.html\n",
			"severity": [
				{
					"type": "vendor",
					"source": "github.com/advisories",
					"vendor": "HIGH"
				}
			],
			"references": [
				{
					"source": "github.com/advisories",
					"url": "https://github.com/ImageOptim/mozjpeg-rust/issues/10"
				},
				{
					"source": "github.com/advisories",
					"url": "https://github.com/ImageOptim/mozjpeg-rust"
				},
				{
					"source": "github.com/advisories",
					"url": "https://rustsec.org/advisories/RUSTSEC-2020-0165.html"
				}
			],
			"published": "2022-09-16T21:03:43Z",
			"modified": "2022-09-16T21:03:43Z",
			"optional": {
				"github_reviewed": true
			}
		}
	],
	"detection": [
		{
			"ecosystem": "cargo",
			"vulnerable": true,
			"package": {
				"name": "mozjpeg"
			},
			"affected": {
				"type": "semver",
				"range": [
					{
						"lt": "0.8.19"
					}
				],
				"fixed": [
					"0.8.19"
				]
			}
		}
	],
	"data_source": "cargo-ghsa"
}
