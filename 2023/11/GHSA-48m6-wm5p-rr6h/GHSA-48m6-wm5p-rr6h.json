{
	"id": "GHSA-48m6-wm5p-rr6h",
	"advisories": [
		{
			"id": "GHSA-48m6-wm5p-rr6h",
			"title": "Insufficient covariance check makes self_cell unsound",
			"description": "All public versions prior to `1.02` used an insufficient check to ensure that users correctly marked the dependent type as either `covariant` or `not_covariant`. This allowed users to mark a dependent as covariant even though its type was not covariant but invariant, for certain invariant types involving trait object lifetimes. One example for such a dependent type is `type Dependent<'a> = RefCell<Box<dyn fmt::Display + 'a>>`. Such a type allowed unsound usage in purely safe user code that leads to undefined behavior. The patched versions now produce a compile time error if such a type is marked as `covariant`.",
			"severity": [
				{
					"type": "vendor",
					"source": "github.com/advisories",
					"vendor": "HIGH"
				}
			],
			"references": [
				{
					"source": "github.com/advisories",
					"url": "https://github.com/Voultapher/self_cell/issues/49"
				},
				{
					"source": "github.com/advisories",
					"url": "https://github.com/Voultapher/self_cell"
				},
				{
					"source": "github.com/advisories",
					"url": "https://rustsec.org/advisories/RUSTSEC-2023-0070.html"
				}
			],
			"published": "2023-11-14T18:32:20Z",
			"modified": "2023-11-14T18:32:20Z",
			"optional": {
				"github_reviewed": true
			}
		}
	],
	"detection": [
		{
			"ecosystem": "cargo",
			"vulnerable": true,
			"package": {
				"name": "self_cell"
			},
			"affected": {
				"type": "semver",
				"range": [
					{
						"lt": "0.10.3"
					}
				],
				"fixed": [
					"0.10.3"
				]
			}
		},
		{
			"ecosystem": "cargo",
			"vulnerable": true,
			"package": {
				"name": "self_cell"
			},
			"affected": {
				"type": "semver",
				"range": [
					{
						"lt": "1.0.2",
						"ge": "1.0.0"
					}
				],
				"fixed": [
					"1.0.2"
				]
			}
		}
	],
	"data_source": "cargo-ghsa"
}
