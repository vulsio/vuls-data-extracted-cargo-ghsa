{
	"id": "GHSA-w5vr-6qhr-36cc",
	"advisories": [
		{
			"id": "GHSA-w5vr-6qhr-36cc",
			"title": "`ed25519-dalek` Double Public Key Signing Function Oracle Attack",
			"description": "Versions of `ed25519-dalek` prior to v2.0 model private and public keys as separate types which can be assembled into a `Keypair`, and also provide APIs for serializing and deserializing 64-byte private/public keypairs.\n\nSuch APIs and serializations are inherently unsafe as the public key is one of the inputs used in the deterministic computation of the `S` part of the signature, but not in the `R` value. An adversary could somehow use the signing function as an oracle that allows arbitrary public keys as input can obtain two signatures for the same message sharing the same `R` and only differ on the `S` part.\n\nUnfortunately, when this happens, one can easily extract the private key.\n\nRevised public APIs in v2.0 of `ed25519-dalek` do NOT allow a decoupled private/public keypair as signing input, except as part of specially labeled \"hazmat\" APIs which are clearly labeled as being dangerous if misused.\n",
			"severity": [
				{
					"type": "vendor",
					"source": "github.com/advisories",
					"vendor": "MODERATE"
				}
			],
			"references": [
				{
					"source": "github.com/advisories",
					"url": "https://github.com/MystenLabs/ed25519-unsafe-libs"
				},
				{
					"source": "github.com/advisories",
					"url": "https://github.com/dalek-cryptography/ed25519-dalek"
				},
				{
					"source": "github.com/advisories",
					"url": "https://rustsec.org/advisories/RUSTSEC-2022-0093.html"
				}
			],
			"published": "2023-08-14T21:10:29Z",
			"modified": "2023-08-14T21:10:29Z",
			"optional": {
				"github_reviewed": true
			}
		}
	],
	"detection": [
		{
			"ecosystem": "cargo",
			"vulnerable": true,
			"package": {
				"name": "ed25519-dalek"
			},
			"affected": {
				"type": "semver",
				"range": [
					{
						"lt": "2.0.0"
					}
				],
				"fixed": [
					"2.0.0"
				]
			}
		}
	],
	"data_source": "cargo-ghsa"
}
