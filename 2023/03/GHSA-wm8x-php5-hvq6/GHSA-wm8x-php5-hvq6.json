{
	"id": "GHSA-wm8x-php5-hvq6",
	"advisories": [
		{
			"id": "GHSA-wm8x-php5-hvq6",
			"title": "Maligned causes incorrect deallocation",
			"description": "`maligned::align_first` manually allocates with an alignment larger than T, and then uses `Vec::from_raw_parts` on that allocation to get a `Vec<T>`.\n\n[`GlobalAlloc::dealloc`](https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.dealloc) requires that the `layout` argument must be the same layout that was used to allocate that block of memory.\n\nWhen deallocating, `Box` and `Vec` may not respect the specified alignment and can cause undefined behavior.\n",
			"severity": [
				{
					"type": "vendor",
					"source": "github.com/advisories",
					"vendor": "MODERATE"
				}
			],
			"references": [
				{
					"source": "github.com/advisories",
					"url": "https://github.com/tylerhawkes/maligned/issues/5"
				},
				{
					"source": "github.com/advisories",
					"url": "https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.dealloc"
				},
				{
					"source": "github.com/advisories",
					"url": "https://github.com/tylerhawkes/maligned"
				},
				{
					"source": "github.com/advisories",
					"url": "https://rustsec.org/advisories/RUSTSEC-2023-0017.html"
				}
			],
			"published": "2023-03-07T20:13:19Z",
			"modified": "2023-03-07T20:13:19Z",
			"optional": {
				"github_reviewed": true
			}
		}
	],
	"detection": [
		{
			"ecosystem": "cargo",
			"vulnerable": true,
			"package": {
				"name": "maligned"
			},
			"affected": {
				"type": "semver",
				"range": [
					{
						"le": "0.2.1"
					}
				]
			}
		}
	],
	"data_source": "cargo-ghsa"
}
