{
	"id": "GHSA-g98v-hv3f-hcfr",
	"advisories": [
		{
			"id": "GHSA-g98v-hv3f-hcfr",
			"title": "atty potential unaligned read",
			"description": "On windows, `atty` dereferences a potentially unaligned pointer.\n\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\n\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\n\n# atty is Unmaintained\n\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\n\nLast release of `atty` was almost 3 years ago.\n\n## Possible Alternative(s)\n\nThe below list has not been vetted in any way and may or may not contain alternatives;\n\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0\"\n",
			"severity": [
				{
					"type": "vendor",
					"source": "github.com/advisories",
					"vendor": "LOW"
				}
			],
			"references": [
				{
					"source": "github.com/advisories",
					"url": "https://github.com/softprops/atty/issues/50"
				},
				{
					"source": "github.com/advisories",
					"url": "https://github.com/softprops/atty/pull/51"
				},
				{
					"source": "github.com/advisories",
					"url": "https://github.com/softprops/atty"
				},
				{
					"source": "github.com/advisories",
					"url": "https://rustsec.org/advisories/RUSTSEC-2021-0145.html"
				}
			],
			"published": "2023-06-30T20:21:59Z",
			"modified": "2024-02-14T17:42:44Z",
			"optional": {
				"github_reviewed": true
			}
		}
	],
	"detection": [
		{
			"ecosystem": "cargo",
			"vulnerable": true,
			"package": {
				"name": "atty"
			},
			"affected": {
				"type": "semver",
				"range": [
					{
						"le": "0.2.14"
					}
				]
			}
		}
	],
	"data_source": "cargo-ghsa"
}
