{
	"id": "GHSA-wfg4-322g-9vqv",
	"advisories": [
		{
			"id": "GHSA-wfg4-322g-9vqv",
			"title": "memoffset allows reading uninitialized memory",
			"description": "memoffset allows attempt of reading data from address `0` with arbitrary type. This behavior is an undefined behavior because address `0` to `std::mem::size_of<T>` may not have valid bit-pattern with `T`. Old implementation dereferences uninitialized memory obtained from `std::mem::align_of`. Older implementation prior to it allows using uninitialized data obtained from `std::mem::uninitialized` with arbitrary type then compute offset by taking the address of field-projection. This may also result in an undefined behavior for \"father\" that includes (directly or transitively) type that [does not allow to be uninitialized](https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html).\n\nThis flaw was corrected by using `std::ptr::addr_of` in <https://github.com/Gilnaa/memoffset/pull/50>.\n",
			"severity": [
				{
					"type": "vendor",
					"source": "github.com/advisories",
					"vendor": "MODERATE"
				}
			],
			"references": [
				{
					"source": "github.com/advisories",
					"url": "https://github.com/Gilnaa/memoffset/issues/24"
				},
				{
					"source": "github.com/advisories",
					"url": "https://github.com/Gilnaa/memoffset/pull/50"
				},
				{
					"source": "github.com/advisories",
					"url": "https://github.com/Gilnaa/memoffset"
				},
				{
					"source": "github.com/advisories",
					"url": "https://rustsec.org/advisories/RUSTSEC-2023-0045.html"
				}
			],
			"published": "2023-06-21T22:06:29Z",
			"modified": "2023-06-21T22:06:29Z",
			"optional": {
				"github_reviewed": true
			}
		}
	],
	"detection": [
		{
			"ecosystem": "cargo",
			"vulnerable": true,
			"package": {
				"name": "memoffset"
			},
			"affected": {
				"type": "semver",
				"range": [
					{
						"lt": "0.6.2"
					}
				],
				"fixed": [
					"0.6.2"
				]
			}
		}
	],
	"data_source": "cargo-ghsa"
}
